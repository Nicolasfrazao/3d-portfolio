/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 hacker-room-new.glb -T 
Files: hacker-room-new.glb [34.62MB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/hacker-room-new-transformed.glb [2.56MB] (93%)
*/

import { useGLTF, useTexture } from '@react-three/drei';

/**
 * A component that renders a 3D model of a hacker's room.
 * This component uses the useGLTF hook from @react-three/drei to load the
 * 3D model from the file hacker-room.glb.
 * The component also uses the useTexture hook from @react-three/drei to load
 * textures from the textures folder.
 *
 * The component returns a group element that contains all the meshes of the
 * 3D model. The group element is passed the props of the component, and its
 * dispose property is set to null, which means that the group element will not
 * be disposed when the component is unmounted.
 *
 * Each mesh is rendered with a meshMatcapMaterial that uses the texture that
 * is loaded with the useTexture hook.
 *
 * The component also uses the useGLTF.preload method to preload the 3D model
 * before the component is rendered.
 */
export function HackerRoom(props) {
  /**
   * Use the useGLTF hook to load the 3D model from the file hacker-room.glb.
   * The hook returns an object with two properties: nodes and materials.
   * The nodes property is an object that contains all the nodes of the 3D
   * model, and the materials property is an object that contains all the
   * materials of the 3D model.
   */
  const { nodes, materials } = useGLTF('/models/hacker-room.glb');

  /**
   * Use the useTexture hook to load the textures for the meshes of the 3D
   * model. The hook takes the path to the texture as an argument, and returns
   * the texture as a THREE.Texture object.
   */
  const monitortxt = useTexture('textures/desk/monitor.png');
  const screenTxt = useTexture('textures/desk/screen.png');

  /**
   * Return a group element that contains all the meshes of the 3D model.
   * The group element is passed the props of the component, and its dispose
   * property is set to null, which means that the group element will not be
   * disposed when the component is unmounted.
   */
  return (
    <group {...props} dispose={null}>
      {
        /**
         * Render each mesh of the 3D model with a meshMatcapMaterial that
         * uses the texture that is loaded with the useTexture hook.
         */
        Object.entries(nodes).map(([name, node]) => {
          const material = materials[name];
          return (
            <mesh
              key={name}
              geometry={node.geometry}
              material={material}
            >
              {
                material.map ? (
                  <meshMatcapMaterial map={material.map} />
                ) : (
                  <meshBasicMaterial color={material.color} />
                )
              }
            </mesh>
          );
        })
      }
    </group>
  );
}

/**
 * Preload the 3D model before the component is rendered.
 */
useGLTF.preload('/models/hacker-room.glb');

